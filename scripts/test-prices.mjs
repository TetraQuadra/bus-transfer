#!/usr/bin/env node

import fs from "fs";
import path from "path";

console.log("üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω –¥–ª—è –±–∏–ª–¥–∞");
console.log("=====================================");
console.log("");

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏
const priceDataPath = path.join(process.cwd(), "src/lib/priceData.ts");
const priceDataContent = fs.readFileSync(priceDataPath, "utf8");

// –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
const routeRegex =
  /"([a-z]+-[a-z]+)":\s*\{\s*comfort:\s*\d+,\s*luxury:\s*\d+\s*\}/g;
const existingRoutes = [];
let match;
while ((match = routeRegex.exec(priceDataContent)) !== null) {
  existingRoutes.push(match[1]);
}

console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingRoutes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ PRICE_DATA`);

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –≥–æ—Ä–æ–¥–∞–º–∏
const citiesPath = path.join(process.cwd(), "src/const/cities.ts");
const citiesContent = fs.readFileSync(citiesPath, "utf8");

// –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥–∞
const cities = [];
const cityRegex = /makeCity\("([^"]+)",\s*"([^"]+)",\s*"([^"]+)",\s*"([^"]+)"/g;
while ((match = cityRegex.exec(citiesContent)) !== null) {
  const [, country, uk, ru, en] = match;
  const slug = en.toLowerCase().replace(/[^a-z]/g, "");
  cities.push({ slug, country, names: { uk, ru, en } });
}

// –†–∞–∑–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
const ukraineCities = cities.filter((city) => city.country === "ukraine");
const europeCities = cities.filter((city) => city.country !== "ukraine");

console.log(`üìä –ì–æ—Ä–æ–¥–∞:`);
console.log(`   üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞: ${ukraineCities.length}`);
console.log(`   üá™üá∫ –ï–≤—Ä–æ–ø–∞: ${europeCities.length}`);

// –°–æ–∑–¥–∞–µ–º —Ö–µ—à-–º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
const priceMap = new Map();
existingRoutes.forEach((route) => {
  priceMap.set(route, true);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º)
function canFindRoute(fromSlug, toSlug) {
  // –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –º–∞—Ä—à—Ä—É—Ç
  if (priceMap.has(`${fromSlug}-${toSlug}`)) {
    return true;
  }
  // –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
  if (priceMap.has(`${toSlug}-${fromSlug}`)) {
    return true;
  }
  return false;
}

let totalTests = 0;
let passedTests = 0;
let failedTests = 0;
const failedRoutes = [];

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
for (const ukraineCity of ukraineCities) {
  for (const europeCity of europeCities) {
    // –£–∫—Ä–∞–∏–Ω–∞ ‚Üí –ï–≤—Ä–æ–ø–∞
    totalTests++;
    if (canFindRoute(ukraineCity.slug, europeCity.slug)) {
      passedTests++;
    } else {
      failedTests++;
      failedRoutes.push(`${ukraineCity.slug}-${europeCity.slug}`);
    }

    // –ï–≤—Ä–æ–ø–∞ ‚Üí –£–∫—Ä–∞–∏–Ω–∞
    totalTests++;
    if (canFindRoute(europeCity.slug, ukraineCity.slug)) {
      passedTests++;
    } else {
      failedTests++;
      failedRoutes.push(`${europeCity.slug}-${ukraineCity.slug}`);
    }
  }
}

console.log("");
console.log("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");
console.log(
  `   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedTests}/${totalTests} (${Math.round(
    (passedTests / totalTests) * 100
  )}%)`
);
console.log(
  `   ‚ùå –û—à–∏–±–æ–∫: ${failedTests}/${totalTests} (${Math.round(
    (failedTests / totalTests) * 100
  )}%)`
);

if (failedRoutes.length > 0) {
  console.log("");
  console.log("üö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:");
  failedRoutes.slice(0, 10).forEach((route) => {
    const [from, to] = route.split("-");
    const fromCity = cities.find((c) => c.slug === from);
    const toCity = cities.find((c) => c.slug === to);
    console.log(
      `   ‚ùå ${fromCity?.names.en || from} ‚Üí ${toCity?.names.en || to}`
    );
  });

  if (failedRoutes.length > 10) {
    console.log(`   ... –∏ –µ—â–µ ${failedRoutes.length - 10} –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
  }
}

console.log("");
console.log("=====================================");

if (failedTests === 0) {
  console.log("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!");
  console.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ü–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!");
  process.exit(0);
} else {
  console.log("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –°–ò–°–¢–ï–ú–û–ô –¶–ï–ù!");
  console.log("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
  process.exit(1);
}
