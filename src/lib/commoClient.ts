const BASE_URL =
  process.env.COMMO_API_URL || "https://svitperevezengroup.kommo.com/api/v4";
const TOKEN = process.env.COMMO_AUTH_TOKEN || "";
const ENABLED = process.env.COMMO_ENABLED !== "false";

const headers = {
  Authorization: `Bearer ${TOKEN}`,
  "Content-Type": "application/json",
  Accept: "application/json",
};

async function findContactByPhone(phone: string) {
  const res = await fetch(
    `${BASE_URL}/contacts?query=${encodeURIComponent(phone)}`,
    { headers }
  );

  if (!res.ok) throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ–Ω—Ç–∞–∫—Ç—É: ${res.statusText}`);

  try {
    const text = await res.text();
    if (!text) return null;

    const data = JSON.parse(text);
    return data?._embedded?.contacts?.[0] || null;
  } catch {
    return null;
  }
}

async function createContact(phone: string, name?: string) {
  const payload = [
    {
      name: name || "–ë–µ–∑ —ñ–º–µ–Ω—ñ",
      custom_fields_values: [
        { field_code: "PHONE", values: [{ value: phone }] },
      ],
    },
  ];

  const res = await fetch(`${BASE_URL}/contacts`, {
    method: "POST",
    headers,
    body: JSON.stringify(payload),
  });

  if (!res.ok) {
    const text = await res.text();
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É: ${res.status} - ${text}`);
  }

  const data = await res.json();
  return data?._embedded?.contacts?.[0];
}

async function createLead(contactId: number) {
  const payload = [
    {
      _embedded: { contacts: [{ id: contactId }] },
      tags_to_add: [{ id: 118558, name: "–°–∞–π—Ç svitperevezen" }],
    },
  ];

  const res = await fetch(`${BASE_URL}/leads`, {
    method: "POST",
    headers,
    body: JSON.stringify(payload),
  });

  if (!res.ok) {
    const text = await res.text();
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–¥–∞: ${res.status} - ${text}`);
  }

  const data = await res.json();
  return data?._embedded?.leads?.[0];
}

async function addNote(leadId: number, text: string) {
  const payload = [
    {
      entity_id: leadId,
      note_type: "common",
      params: { text },
    },
  ];

  const res = await fetch(`${BASE_URL}/leads/notes`, {
    method: "POST",
    headers,
    body: JSON.stringify(payload),
  });

  if (!res.ok) {
    const t = await res.text();
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏: ${res.status} - ${t}`);
  }

  return res.json();
}

function formatNotes(data: {
  type: "passenger" | "parcel" | "pets";
  departureCountry: string;
  departureCity: string;
  arrivalCountry: string;
  arrivalCity: string;
  date?: string;
  fullName: string;
  phone: string;
  additionalInfo?: string;
}) {
  const typeLabels = {
    passenger: "–ü–∞—Å–∞–∂–∏—Ä—Å—å–∫–µ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è",
    parcel: "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–æ–∫",
    pets: "–ü–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è —Ç–≤–∞—Ä–∏–Ω",
  };

  let note = `üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞: ${typeLabels[data.type]}\n`;
  note += `–ú–∞—Ä—à—Ä—É—Ç: ${data.departureCountry}, ${data.departureCity} ‚Üí ${data.arrivalCountry}, ${data.arrivalCity}\n`;
  if (data.date) note += `–î–∞—Ç–∞: ${data.date}\n`;
  note += `–ö–ª—ñ—î–Ω—Ç: ${data.fullName}\n`;
  note += `–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n`;
  if (data.additionalInfo)
    note += `–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: ${data.additionalInfo}\n`;
  return note;
}

export async function sendToCommo(bookingData: {
  type: "passenger" | "parcel" | "pets";
  departureCountry: string;
  departureCity: string;
  arrivalCountry: string;
  arrivalCity: string;
  date?: string;
  fullName: string;
  phone: string;
  additionalInfo?: string;
}) {
  if (!ENABLED) {
    return { success: true, data: { disabled: true } };
  }

  try {
    const { phone, fullName } = bookingData;
    console.log(`üîç –ü–æ—à—É–∫ –∫–æ–Ω—Ç–∞–∫—Ç—É –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${phone}`);

    const normalizedPhone = phone.replace(/[^0-9]/g, "");

    const contact =
      (await findContactByPhone(normalizedPhone)) ||
      (await createContact(normalizedPhone, fullName));

    console.log(`‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç ID: ${contact.id}`);

    const lead = await createLead(contact.id);
    console.log(`üéØ –õ—ñ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${lead.id}`);

    const noteText = formatNotes(bookingData);
    await addNote(lead.id, noteText);

    console.log(`üóíÔ∏è –ù–æ—Ç–∞—Ç–∫—É –¥–æ–¥–∞–Ω–æ –¥–æ –ª—ñ–¥–∞ ${lead.id}`);

    return { success: true, leadId: lead.id, contactId: contact.id };
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ Kommo:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞",
    };
  }
}
